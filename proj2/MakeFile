CXX = g++
CXXFLAGS = -std=c++17 -Wall -Iinclude
LDFLAGS = -lexpat
OBJDIR = obj
BINDIR = bin

# Source files
SOURCES = StringUtils.cpp StringUtilsTest.cpp StringDataSourceTest.cpp StringDataSinkTest.cpp DSVTest.cpp XMLTest.cpp
OBJECTS = $(SOURCES:%.cpp=$(OBJDIR)/%.o)

# Targets
EXEC_TESTS = $(BINDIR)/teststrutils $(BINDIR)/teststrdatasource $(BINDIR)/teststrdatasink $(BINDIR)/testdsv $(BINDIR)/testxml

all: directories $(EXEC_TESTS)

# Rules for creating each test executable
$(BINDIR)/teststrutils: $(OBJDIR)/StringUtilsTest.o $(OBJDIR)/StringUtils.o
	$(CXX) $(CXXFLAGS) $^ -o $@

$(BINDIR)/teststrdatasource: $(OBJDIR)/StringDataSourceTest.o
	$(CXX) $(CXXFLAGS) $^ -o $@

$(BINDIR)/teststrdatasink: $(OBJDIR)/StringDataSinkTest.o
	$(CXX) $(CXXFLAGS) $^ -o $@

$(BINDIR)/testdsv: $(OBJDIR)/DSVTest.o
	$(CXX) $(CXXFLAGS) $^ -o $@

$(BINDIR)/testxml: $(OBJDIR)/XMLTest.o
	$(CXX) $(CXXFLAGS) $^ -o $@

# Rule for creating object files
$(OBJDIR)/%.o: %.cpp
	@mkdir -p $(OBJDIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Create directories if not present
directories:
	@mkdir -p $(BINDIR) $(OBJDIR)

# Run tests in the specified order
test: $(EXEC_TESTS)
	@echo "Running tests in order..."
	$(BINDIR)/teststrutils
	$(BINDIR)/teststrdatasource
	$(BINDIR)/teststrdatasink
	$(BINDIR)/testdsv
	$(BINDIR)/testxml

clean:
	rm -rf $(OBJDIR) $(BINDIR)
